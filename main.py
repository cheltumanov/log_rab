import os
import datetime
from typing import Dict, List, Optional, Deque, Set
from collections import deque, defaultdict
from abc import ABC, abstractmethod
import telebot
from telebot import types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# –ö–ª–∞—Å—Å—ã –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
class Entity(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
    @abstractmethod
    def display_info(self) -> str:
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–Ω–æ—Å—Ç–∏"""
        pass


class Guest(Entity):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–æ—Å—Ç—è –æ—Ç–µ–ª—è"""
    _used_passports: Set[str] = set()
    
    def __init__(self, guest_id: int, name: str, passport: str, phone: str):
        self.guest_id = guest_id
        self.name = name
        self.passport = passport
        self.phone = phone
        self.bookings: List['Booking'] = []
        
        if passport in Guest._used_passports:
            raise ValueError("–ì–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º –ø–∞—Å–ø–æ—Ä—Ç–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        Guest._used_passports.add(passport)
    
    def add_booking(self, booking: 'Booking'):
        self.bookings.append(booking)
    
    def remove_booking(self, booking: 'Booking'):
        self.bookings.remove(booking)
    
    def get_active_bookings(self) -> List['Booking']:
        today = datetime.date.today()
        return [b for b in self.bookings if b.end_date >= today]
    
    def display_info(self) -> str:
        return (f"üè∑ –ì–æ—Å—Ç—å #{self.guest_id}\n"
                f"üë§ –ò–º—è: {self.name}\n"
                f"üìÑ –ü–∞—Å–ø–æ—Ä—Ç: {self.passport}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {self.phone}\n"
                f"üî¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π: {len(self.get_active_bookings())}")
    
    def __str__(self):
        return f"üë§ #{self.guest_id} {self.name}"


class Capsule(Entity):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞–ø—Å—É–ª—ã –≤ –æ—Ç–µ–ª–µ"""
    TYPE_STANDARD = "–°—Ç–∞–Ω–¥–∞—Ä—Ç"
    TYPE_LUX = "–õ—é–∫—Å"
    TYPE_PREMIUM = "–ü—Ä–µ–º–∏—É–º"
    
    BASE_PRICES = {
        TYPE_STANDARD: 1500,
        TYPE_LUX: 2500,
        TYPE_PREMIUM: 3500
    }
    
    def __init__(self, capsule_id: int, capsule_type: str):
        self.capsule_id = capsule_id
        self.type = capsule_type
        self.price_per_night = self._calculate_price()
        self.is_available = True
        self.current_booking: Optional['Booking'] = None
    
    def _calculate_price(self) -> float:
        base_price = self.BASE_PRICES.get(self.type, 1000)
        import random
        return base_price * (1 + random.uniform(-0.1, 0.1))
    
    @staticmethod
    def get_available_types() -> List[str]:
        return list(Capsule.BASE_PRICES.keys())
    
    def book(self, booking: 'Booking'):
        if not self.is_available:
            raise ValueError("–ö–∞–ø—Å—É–ª–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞")
        self.is_available = False
        self.current_booking = booking
    
    def release(self):
        self.is_available = True
        self.current_booking = None
    
    def display_info(self) -> str:
        status = "üü¢ –î–æ—Å—Ç—É–ø–Ω–∞" if self.is_available else "üî¥ –ó–∞–Ω—è—Ç–∞"
        return (f"üö™ –ö–∞–ø—Å—É–ª–∞ #{self.capsule_id}\n"
                f"üè∑ –¢–∏–ø: {self.type}\n"
                f"üí∞ –¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {self.price_per_night:.2f} —Ä—É–±.\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {status}")
    
    def __str__(self):
        status = "üü¢" if self.is_available else "üî¥"
        return f"{status} –ö–∞–ø—Å—É–ª–∞ #{self.capsule_id} ({self.type}) - {self.price_per_night:.2f} —Ä—É–±./–Ω–æ—á—å"


class Booking(Entity):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _booking_history: Deque['Booking'] = deque(maxlen=1000)
    
    def __init__(self, booking_id: int, guest: Guest, capsule: Capsule, 
                 start_date: datetime.date, end_date: datetime.date):
        if start_date >= end_date:
            raise ValueError("–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞")
        
        self.booking_id = booking_id
        self.guest = guest
        self.capsule = capsule
        self.start_date = start_date
        self.end_date = end_date
        self.is_paid = False
        self._validate_dates()
        
        self.capsule.book(self)
        self.guest.add_booking(self)
        Booking._booking_history.append(self)
    
    def _validate_dates(self):
        today = datetime.date.today()
        if self.start_date < today:
            raise ValueError("–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º")
        if (self.end_date - self.start_date).days > 30:
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - 30 –¥–Ω–µ–π")
    
    @classmethod
    def get_recent_bookings(cls, count: int = 5) -> List['Booking']:
        return list(cls._booking_history)[-count:]
    
    def calculate_total(self) -> float:
        nights = (self.end_date - self.start_date).days
        return nights * self.capsule.price_per_night
    
    def mark_as_paid(self):
        self.is_paid = True
    
    def cancel(self):
        self.capsule.release()
        self.guest.remove_booking(self)
    
    def display_info(self) -> str:
        paid_status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if self.is_paid else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
        return (f"üìù –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{self.booking_id}\n"
                f"üë§ –ì–æ—Å—Ç—å: {self.guest.name} (#{self.guest.guest_id})\n"
                f"üö™ –ö–∞–ø—Å—É–ª–∞: {self.capsule.type} (#{self.capsule.capsule_id})\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {self.start_date} - {self.end_date}\n"
                f"üí∞ –°—É–º–º–∞: {self.calculate_total():.2f} —Ä—É–±.\n"
                f"üìå –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {paid_status}")
    
    def __str__(self):
        paid_status = "‚úÖ" if self.is_paid else "‚ùå"
        return (f"{paid_status} –ë—Ä–æ–Ω—å #{self.booking_id}: {self.guest.name} "
                f"–≤ –∫–∞–ø—Å—É–ª–µ #{self.capsule.capsule_id} ({self.start_date} - {self.end_date})")


class Hotel:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–µ–ª—è"""
    def __init__(self, name: str):
        self.name = name
        self.guests: Dict[int, Guest] = {}
        self.capsules: Dict[int, Capsule] = {}
        self.bookings: Dict[int, Booking] = {}
        self._next_guest_id = 1
        self._next_capsule_id = 1
        self._next_booking_id = 1
        self._initialize_sample_data()
    
    def _initialize_sample_data(self):
        for _ in range(3):
            self.add_capsule(Capsule.TYPE_STANDARD)
        for _ in range(2):
            self.add_capsule(Capsule.TYPE_LUX)
        self.add_capsule(Capsule.TYPE_PREMIUM)
        
        self.register_guest("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "1234567890", "+79123456789")
        self.register_guest("–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "0987654321", "+79098765432")
    
    def add_capsule(self, capsule_type: str) -> Capsule:
        capsule = Capsule(self._next_capsule_id, capsule_type)
        self.capsules[self._next_capsule_id] = capsule
        self._next_capsule_id += 1
        return capsule
    
    def register_guest(self, name: str, passport: str, phone: str) -> Guest:
        name = ' '.join(part.capitalize() for part in name.split())
        
        guest = Guest(self._next_guest_id, name, passport, phone)
        self.guests[self._next_guest_id] = guest
        self._next_guest_id += 1
        return guest
    
    def create_booking(self, guest_id: int, capsule_id: int, 
                      start_date: datetime.date, end_date: datetime.date) -> Booking:
        if guest_id not in self.guests:
            raise ValueError("–ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if capsule_id not in self.capsules:
            raise ValueError("–ö–∞–ø—Å—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        guest = self.guests[guest_id]
        capsule = self.capsules[capsule_id]
        
        booking = Booking(self._next_booking_id, guest, capsule, start_date, end_date)
        self.bookings[self._next_booking_id] = booking
        self._next_booking_id += 1
        return booking
    
    def get_available_capsules(self, date: Optional[datetime.date] = None) -> List[Capsule]:
        if date is None:
            date = datetime.date.today()
        
        available = []
        for capsule in self.capsules.values():
            if capsule.is_available or (capsule.current_booking and 
                                       not (capsule.current_booking.start_date <= date <= capsule.current_booking.end_date)):
                available.append(capsule)
        return available
    
    def check_out(self, booking_id: int):
        if booking_id not in self.bookings:
            raise ValueError("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        booking = self.bookings[booking_id]
        booking.cancel()
        del self.bookings[booking_id]
    
    def get_guest_statistics(self) -> Dict[str, float]:
        stats = defaultdict(float)
        for booking in self.bookings.values():
            stats[booking.guest.name] += booking.calculate_total()
        return stats


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–µ–ª—è
hotel = Hotel("–ö–∞–ø—Å—É–ª—å–Ω—ã–π –æ—Ç–µ–ª—å '–ö–æ—Å–º–æ—Å'")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–∏–º–∏—Ç–∞—Ü–∏—è)
user_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(
        message,
        "üè® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ø—Å—É–ª—å–Ω—ã–º –æ—Ç–µ–ª–µ–º!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/guests - –°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π\n"
        "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è\n"
        "/capsules - –°–ø–∏—Å–æ–∫ –∫–∞–ø—Å—É–ª\n"
        "/book - –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "/bookings - –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n"
        "/checkout - –í—ã—Å–µ–ª–∏—Ç—å –≥–æ—Å—Ç—è\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Å—Ç—è–º\n"
        "/recent - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    )


@bot.message_handler(commands=['guests'])
def list_guests(message):
    if not hotel.guests:
        bot.reply_to(message, "–í –æ—Ç–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Å—Ç–µ–π.")
        return
    
    response = "üìã –°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π:\n\n"
    for guest in sorted(hotel.guests.values(), key=lambda g: g.guest_id):
        response += f"{guest}\n{guest.display_info()}\n\n"
    
    bot.reply_to(message, response)


@bot.message_handler(commands=['register'])
def register_guest_start(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è:")
    bot.register_next_step_handler(msg, process_guest_name)


def process_guest_name(message):
    try:
        user_states[message.chat.id] = {'name': message.text}
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Å—Ç—è:")
        bot.register_next_step_handler(msg, process_guest_passport)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


def process_guest_passport(message):
    try:
        user_states[message.chat.id]['passport'] = message.text
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≥–æ—Å—Ç—è:")
        bot.register_next_step_handler(msg, process_guest_phone)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


def process_guest_phone(message):
    try:
        data = user_states[message.chat.id]
        data['phone'] = message.text
        
        guest = hotel.register_guest(data['name'], data['passport'], data['phone'])
        bot.reply_to(message, f"‚úÖ –ì–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n{guest.display_info()}")
        del user_states[message.chat.id]
    except ValueError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['capsules'])
def list_capsules(message):
    if not hotel.capsules:
        bot.reply_to(message, "–í –æ—Ç–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–ø—Å—É–ª.")
        return
    
    response = "üö™ –°–ø–∏—Å–æ–∫ –∫–∞–ø—Å—É–ª:\n\n"
    for capsule in sorted(hotel.capsules.values(), key=lambda c: c.capsule_id):
        response += f"{capsule}\n{capsule.display_info()}\n\n"
    
    bot.reply_to(message, response)


@bot.message_handler(commands=['book'])
def book_start(message):
    if not hotel.guests:
        bot.reply_to(message, "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –≥–æ—Å—Ç—è.")
        return
    
    guests_list = "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—Ç—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
    for guest in hotel.guests.values():
        guests_list += f"{guest.guest_id}. {guest.name}\n"
    
    msg = bot.reply_to(message, guests_list)
    bot.register_next_step_handler(msg, process_booking_guest)


def process_booking_guest(message):
    try:
        guest_id = int(message.text)
        if guest_id not in hotel.guests:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ—Å—Ç—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        user_states[message.chat.id] = {'guest_id': guest_id}
        
        available = hotel.get_available_capsules()
        if not available:
            bot.reply_to(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–ø—Å—É–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        
        capsules_list = "üö™ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ø—Å—É–ª—É (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
        for capsule in available:
            capsules_list += f"{capsule.capsule_id}. {capsule.type} - {capsule.price_per_night:.2f} —Ä—É–±./–Ω–æ—á—å\n"
        
        msg = bot.reply_to(message, capsules_list)
        bot.register_next_step_handler(msg, process_booking_capsule)
    except ValueError:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –≥–æ—Å—Ç—è.")


def process_booking_capsule(message):
    try:
        capsule_id = int(message.text)
        if capsule_id not in hotel.capsules:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞–ø—Å—É–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        user_states[message.chat.id]['capsule_id'] = capsule_id
        msg = bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        bot.register_next_step_handler(msg, process_booking_start_date)
    except ValueError:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–ø—Å—É–ª—ã.")


def process_booking_start_date(message):
    try:
        start_date = datetime.date.fromisoformat(message.text)
        today = datetime.date.today()
        
        if start_date < today:
            bot.reply_to(message, "‚ùå –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        user_states[message.chat.id]['start_date'] = start_date
        msg = bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        bot.register_next_step_handler(msg, process_booking_end_date)
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")


def process_booking_end_date(message):
    try:
        end_date = datetime.date.fromisoformat(message.text)
        data = user_states[message.chat.id]
        start_date = data['start_date']
        
        if end_date <= start_date:
            bot.reply_to(message, "‚ùå –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        if (end_date - start_date).days > 30:
            bot.reply_to(message, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - 30 –¥–Ω–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        try:
            booking = hotel.create_booking(
                data['guest_id'],
                data['capsule_id'],
                start_date,
                end_date
            )
            bot.reply_to(message, f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n{booking.display_info()}")
            del user_states[message.chat.id]
        except ValueError as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")


@bot.message_handler(commands=['bookings'])
def list_bookings(message):
    if not hotel.bookings:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return
    
    response = "üìã –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:\n\n"
    for booking in sorted(hotel.bookings.values(), key=lambda b: b.booking_id):
        response += f"{booking}\n{booking.display_info()}\n\n"
    
    bot.reply_to(message, response)


@bot.message_handler(commands=['checkout'])
def checkout_start(message):
    if not hotel.bookings:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ã—Å–µ–ª–µ–Ω–∏—è.")
        return
    
    bookings_list = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Å–µ–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
    for booking in hotel.bookings.values():
        bookings_list += f"{booking.booking_id}. {booking.guest.name} - –ö–∞–ø—Å—É–ª–∞ #{booking.capsule.capsule_id}\n"
    
    msg = bot.reply_to(message, bookings_list)
    bot.register_next_step_handler(msg, process_check_out)


def process_check_out(message):
    try:
        booking_id = int(message.text)
        
        try:
            hotel.check_out(booking_id)
            bot.reply_to(message, f"‚úÖ –ì–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –≤—ã—Å–µ–ª–µ–Ω, –∫–∞–ø—Å—É–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞.")
        except ValueError as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    except ValueError:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")


@bot.message_handler(commands=['stats'])
def show_stats(message):
    stats = hotel.get_guest_statistics()
    if not stats:
        bot.reply_to(message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Å—Ç—è–º (–æ–±—â–∞—è —Å—É–º–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π):\n\n"
    for name, total in sorted(stats.items(), key=lambda item: item[1], reverse=True):
        response += f"üë§ {name}: {total:.2f} —Ä—É–±.\n"
    
    bot.reply_to(message, response)


@bot.message_handler(commands=['recent'])
def show_recent_bookings(message):
    recent = Booking.get_recent_bookings()
    if not recent:
        bot.reply_to(message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö.")
        return
    
    response = "‚è≥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for booking in recent:
        response += f"{booking}\n{booking.display_info()}\n\n"
    
    bot.reply_to(message, response)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()